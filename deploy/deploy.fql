Delete(Index("entity-by-revision"))

CreateIndex({
  name: "entity-by-revision",
  source: {
    collection: Collection("entity-revisions"),
  },
  terms: [
    { field: ["data", "entity"] },
    { field: ["data", "revision"] }
  ],
  values: [
    { field: "ref" }
  ],
  unique: true
}
)

Delete(Index("entity-by-tag"))

CreateIndex({
  name: "entity-by-tag",
  source: {
    collection: Collection("entities"),
  },
  terms: [
    { field: ["data", "tag"] }
  ],
  values: [
    { field: "ref" }
  ],
  unique: true
}
)

Paginate(Match(Index("entity-by-tag"), "invoice"))

Paginate(Match(Index("entity-by-revision"), [Ref(Collection("entities"), "315401292783550663"), 2]))

// Get an entity by tag and revision
Let(
  {
    entityRef: Match(Index("entity-by-tag"), "invoice")
  },  
  If(
    Exists(Var("entityRef")),
    Let(
      {
        entityDoc: Get(Var("entityRef")),
        revisionRef: Match(Index("entity-by-revision"), [Select("ref", Var("entityDoc")), 1])
      },
      If(
        Exists(Var("revisionRef")),
        Let(
          {
            revisionDoc: Get(Var("revisionRef"))
          },
          {
            status: "success",
            data: {
                id: Select(["ref", "id"], Var("entityDoc")),
                name: Select(["data", "name"], Var("entityDoc")),
                tag: Select(["data", "tag"], Var("entityDoc")),
                labels: Select(["data", "labels"], Var("entityDoc")),
                revision: {
                    id: Select(["ref", "id"], Var("revisionDoc")),
                    revision: Select(["data", "revision"], Var("revisionDoc")),
                    status: Select(["data", "status"], Var("revisionDoc")),
                    edited_by: Select(["data", "edited_by"], Var("revisionDoc")),
                    published_by: Select(["data", "published_by"], Var("revisionDoc")),
                    definition: Select(["data", "definition"], Var("revisionDoc"))
                }
            }
          }
        ),
        {
          status: "not-found"
        }
      )
    ),
    {
      status: "not-found"
    }
  )
)

// Get an entity's head revision given a tag.
Let(
  {
    entityRef: Match(Index("entity-by-tag"), "invoice")
  },  
  If(
    Exists(Var("entityRef")),
    Let(
      {
        entityDoc: Get(Var("entityRef")),
        revisionDoc: Get(Select(["data", "head"], Var("entityDoc")))
      },
      {
        status: "success",
        data: {
            id: Select(["ref", "id"], Var("entityDoc")),
            name: Select(["data", "name"], Var("entityDoc")),
            tag: Select(["data", "tag"], Var("entityDoc")),
            labels: Select(["data", "labels"], Var("entityDoc")),
            revision: {
                id: Select(["ref", "id"], Var("revisionDoc")),
                revision: Select(["data", "revision"], Var("revisionDoc")),
                status: Select(["data", "status"], Var("revisionDoc")),
                edited_by: Select(["data", "edited_by"], Var("revisionDoc")),
                published_by: Select(["data", "published_by"], Var("revisionDoc")),
                definition: Select(["data", "definition"], Var("revisionDoc"))
            }
        }
      }
    ),
    {
      status: "not-found"
    }
  )
)

// Update a revision
Let(
  {
    revisionRef: Ref(Collection("entity-revisions"), "316309357286392000")
  },
  If(
    Exists(Var("revisionRef")),
    Let(
      { revisionDoc: Get(Var("revisionRef")) },
      If(
        GTE(1638126431930000, Select(["ts"], Var("revisionDoc"))),
        Let(
          { entityDoc: Get(Select(["data", "entity"], Var("revisionDoc"))) },
          If(
            Equals(Var("revisionRef"), Select(["data","latest"], Var("entityDoc"))),
            If(
              Equals("published", Select(["data", "status"], Var("revisionDoc"))),
              Let(
                {
                  newRevision: Add(1, Select(["data", "revision"], Var("revisionDoc"))),
                  createdResult: Create(
                    Collection("entity-revisions"),
                    {
                      data: {
                        "entity": Select(["ref"], Var("entityDoc")),
                        "revision": Var("newRevision"),
                        "status": "draft",
                        "edited_by": "",
                        "published_by": "",
                        "definition": "CREATED"                        
                      }
                    }
                  ),
                  updateResult: Update(Select(["ref"], Var("entityDoc")), { data: { latest: Select("ref", Var("createdResult")) } }), 
                },
                {
                  "status": "success",
                  "data": {
                    "id": Select(["ref", "id"], Var("createdResult")),
                    "tag": Select(["data", "tag"], Var("entityDoc")),
                    "revision": Var("newRevision"),
                    "last_modified_on": Select("ts", q.Var("createdResult"))
                  }
                }
              ),
              Let(
                { updateResult: Update(Var("revisionRef"), { data: { definition: "UPDATED" } } ) },
                {
                  "status": "success",
                  "data": {
                    "id": Select(["ref", "id"], Var("updateResult")),
                    "tag": Select(["data", "tag"], Var("entityDoc")),
                    "revision": Select(["data", "revision"], Var("revisionDoc")),
                    "last_modified_on": Select("ts", q.Var("updateResult"))
                  }
                }
              )
            ),
            {
              "status": "precondition-failed",
              "sub_status": "newer-available",
              "message": "newer revision available"
            }
          )
        ),
        {
          "status": "precondition-failed",
          "sub_status": "stale",
          "message": "The entity was already modified by someone else."
        }
      )
    ),
    {
      status: "not-found"
    }
  )
)
